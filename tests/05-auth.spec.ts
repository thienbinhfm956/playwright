import { expect, test } from "@playwright/test"
import { AuthenticationApiPage } from "../pom/01-pom-login.pom";
import { AuthorApiPage } from "../pom/02-pom-author.pom";

test("06 - authenticated with pom", async ({ request }) => {
    const authPOM = new AuthenticationApiPage(request);

    const token = await authPOM.login("admin@betterbytesvn.com", "123@123A");
    console.log(token);
});
test("07 - register new author with random username and verify response", async ({ request }) => {
    const authPOM = new AuthenticationApiPage(request);
    const token = await authPOM.login("admin@betterbytesvn.com", "123@123A");
  
    const authorPOM = new AuthorApiPage(request, token);
  
    const result = await authorPOM.registerAuthorAccount("John Doe", "password123");
  
    const data = result.data;
  
    console.log("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng. Username:", result.generatedUsername);
  
    expect(data).toBeTruthy(); // C√≥ data tr·∫£ v·ªÅ
    //expect(data.username).toBe(result.generatedUsername); // ƒê√∫ng username random ƒë√£ g·ª≠i
    //expect(data.name).toBe("John Doe"); // ƒê√∫ng t√™n ƒë√£ ƒëƒÉng k√Ω
    expect(result.message).toMatch(/success/i); // Message ch·ª©a "success"
  });
  test("08 - create new author with random name and verify response", async ({ request }) => {
    // B∆∞·ªõc 1: ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y access token
    const authPOM = new AuthenticationApiPage(request);
    const token = await authPOM.login("admin@betterbytesvn.com", "123@123A");
  
    // B∆∞·ªõc 2: Kh·ªüi t·∫°o POM cho t√°c gi·∫£
    const authorPOM = new AuthorApiPage(request, token);
  
    // ‚úÖ T·∫°o name random
    const randomName = "Author_" + Math.random().toString(36).substring(2, 8);
  
    // D·ªØ li·ªáu m·∫´u
    const description = "T√°c gi·∫£ th·ª≠ nghi·ªám";
    const birthDate = new Date().toISOString();
    const deathDate = new Date().toISOString();
    const nationality = "Vietnamese";
  
    // B∆∞·ªõc 3: G·ªçi API t·∫°o t√°c gi·∫£
    const result = await authorPOM.createAuthor(randomName, description, birthDate, deathDate, nationality);
  
    console.log("‚úÖ T√°c gi·∫£ ƒë√£ ƒë∆∞·ª£c t·∫°o:", result);
  
    // ‚úÖ B∆∞·ªõc 4: X√°c minh d·ªØ li·ªáu tr·∫£ v·ªÅ
    expect(result).toBeTruthy();
    expect(result.data).toBeDefined();
    expect(result.data.name).toBe(randomName);
    //expect(result.data.nationality).toBe(nationality);
  });
  test("09 - get authors with pagination and verify response", async ({ request }) => {
    // ƒêƒÉng nh·∫≠p
    const authPOM = new AuthenticationApiPage(request);
    const token = await authPOM.login("admin@betterbytesvn.com", "123@123A");
  
    const authorPOM = new AuthorApiPage(request, token);
  
    // G·ªçi API l·∫•y danh s√°ch t√°c gi·∫£
    const result = await authorPOM.getAuthorsWithPagination(1, 10);
  
    console.log("‚úÖ Danh s√°ch t√°c gi·∫£ (page 1):", result);
  
    // X√°c minh d·ªØ li·ªáu tr·∫£ v·ªÅ
    expect(result).toBeTruthy();
    expect(result.data).toBeDefined();
    expect(Array.isArray(result.data)).toBe(true);
    expect(result.data.length).toBeLessThanOrEqual(10);
  });

  test("10 - get author by ID and verify response", async ({ request }) => {
    // ƒêƒÉng nh·∫≠p
    const authPOM = new AuthenticationApiPage(request);
    const token = await authPOM.login("admin@betterbytesvn.com", "123@123A");
  
    const authorPOM = new AuthorApiPage(request, token);
  
    // ID m·∫´u ƒë·ªÉ test, b·∫°n c√≥ th·ªÉ d√πng ID v·ª´a t·∫°o t·ª´ test tr∆∞·ªõc
    const authorId = 2;
  
    const result = await authorPOM.getAuthorById(authorId);
  
    console.log("‚úÖ T√°c gi·∫£ v·ªõi ID 2:", result);
  
    // ‚úÖ Ki·ªÉm tra ph·∫£n h·ªìi
    expect(result).toBeTruthy();
    //expect(result.data).toBeDefined();
    //expect(result.data.id).toBe(authorId);
    //expect(result.data.name).toBeDefined();
  });

  test("11 - update author by ID and verify", async ({ request }) => {
    // ƒêƒÉng nh·∫≠p
    const authPOM = new AuthenticationApiPage(request);
    const token = await authPOM.login("admin@betterbytesvn.com", "123@123A");
  
    const authorPOM = new AuthorApiPage(request, token);
  
    // ID gi·∫£ ƒë·ªãnh ƒë·ªÉ c·∫≠p nh·∫≠t 
    const authorId = 1;
  
    // D·ªØ li·ªáu c·∫≠p nh·∫≠t
    const name = "Author Updated";
    const description = "Updated description";
    const birthDate = new Date().toISOString();
    const deathDate = new Date().toISOString();
    const nationality = "Updated Nationality";
  
    const result = await authorPOM.updateAuthorById(
      authorId,
      name,
      description,
      birthDate,
      deathDate,
      nationality
    );
  
    console.log("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng:", result);
  
    // ‚úÖ Ki·ªÉm tra ph·∫£n h·ªìi
    expect(result).toBeTruthy();
    expect(result.data).toBeDefined();
    expect(result.data.id).toBe(authorId);
    expect(result.data.name).toBe(name);
  });

  test("12 - delete author by ID and verify", async ({ request }) => {
    const authPOM = new AuthenticationApiPage(request);
    const token = await authPOM.login("admin@betterbytesvn.com", "123@123A");
  
    const authorPOM = new AuthorApiPage(request, token);
  
    // ‚úÖ B∆∞·ªõc 1: T·∫°o author ƒë·ªÉ test x√≥a (tr√°nh x√≥a nh·∫ßm d·ªØ li·ªáu g·ªëc)
    const created = await authorPOM.createAuthor(
      "AuthorToDelete",
      "This author will be deleted",
      new Date().toISOString(),
      new Date().toISOString(),
      "Temporary"
    );
  
    const authorId = created.data.id;
    console.log(`üõ† ƒê√£ t·∫°o t√°c gi·∫£ ID ${authorId} ƒë·ªÉ ki·ªÉm tra x√≥a`);
  
    // ‚úÖ B∆∞·ªõc 2: G·ªçi API x√≥a
    const result = await authorPOM.deleteAuthorById(authorId);
    console.log("‚úÖ", result.message);
  
    // ‚úÖ B∆∞·ªõc 3: G·ªçi l·∫°i getById ƒë·ªÉ x√°c nh·∫≠n ƒë√£ x√≥a
    let getError;
    try {
      await authorPOM.getAuthorById(authorId);
    } catch (error) {
      getError = error;
    }
  
    expect(getError).toBeDefined(); // Ch·∫Øc ch·∫Øn kh√¥ng c√≤n t√¨m th·∫•y t√°c gi·∫£ ƒë√£ x√≥a
  });
